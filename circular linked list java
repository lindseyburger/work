package circularlinkedlist;
import java.util.Iterator;
import java.util.Scanner;

/**
 *
 * @author LindseyKBurger
 */
public class CircularLinkedList<E> {

    // Your variables
       
	public Node<E> head;
	public Node<E> tail;
	public int size;  // BE SURE TO KEEP TRACK OF THE SIZE

	
	// implement this constructor
	
	public CircularLinkedList() {
            this.head = null;
            this.tail = null;
            this.size = 0;
	}
        
        public int size(){
            return size;
        }


	
        private Node <E> getNode(int index ) {
            if(index < 0 || index >= size){
                throw new ArrayIndexOutOfBoundsException(index);
            }              
            Node <E> current = head;
            for (int i = 0; i < index; i++){
                current = current.next;
		
	}
            return current;
            
        }


	// attach a node to the end of the list
	public boolean add(E item) {
		this.add(size,item);
		return true;

	}

	
	// Cases to handle
	// out of bounds
	// adding to empty list
	// adding to front
	// adding to "end"
	// adding anywhere else
	// REMEMBER TO INCREMENT THE SIZE
	public void add(int index, E item){
            
            if(index<0 || index > size) {
		throw new ArrayIndexOutOfBoundsException(index);
		}

            Node <E> temp = new Node<E>(item);
		// adding to empty list
		if(size == 0) {
			head = temp;
			tail = temp;
		//new head	
		} else if(index == 0) { 
			temp.next = head;
			head.prev = temp;
			head = temp;
                //new tail       
		} else if(index == size) {
			temp.prev = tail;
			tail.next = temp;
			tail = temp;
                //anywhere else       
		} else { 
			Node<E> node =  getNode(index -1);
			temp.next = node.next;
			temp.prev = node;
			node.next = temp;
			temp.next.prev =  temp;
		}
		size++;
	}
            
	

	
	public E remove(int index) {
            E retval = null;

            if(index < 0 || index >= size){
                throw new ArrayIndexOutOfBoundsException(index);
            }
            
            else if(size == 1){
                retval = tail.item;
                head = null;
                tail = null;
            }
            
            else if(index == 0){
                retval = head.item;
                head = head.next;
                head.prev = null;
            }
            
            else if (index == size -1){
                retval = tail.item;
                tail = tail.prev;
                tail.next = null;
            }
            
            else {
                Node<E> node = getNode(index - 1);
                retval = node.next.item;
                node.next.next.prev = node;
                node.next = node.next.next;
            }
            
            size --;
            return retval;
            
	}
	
	
	
	
	// Turns your list into a string
	// Useful for debugging
	public String toString(){
		Node<E> current =  head;
		StringBuilder result = new StringBuilder();
		if(size == 0){
			return "";
		}
		if(size == 1) {
			return head.getElement().toString();
			
		}
		else{
			do{
				result.append(current.getElement());
				result.append(" ==> ");
				current = current.next;
			} while(current != head);
		}
		return result.toString();
	}
	
	
	public Iterator<E> iterator() {
		return new ListIterator<E>();
	}
	
	// provided code
	// read the comments to figure out how this works and see how to use it
	// you should not have to change this
	// change at your own risk!
	private class ListIterator<E> implements Iterator<E>{
		
		Node<E> nextItem;
		Node<E> prev;
		int index;
		
		@SuppressWarnings("unchecked")
		//Creates a new iterator that starts at the head of the list
		public ListIterator(){
			nextItem = (Node<E>) head;
			index = 0;
		}

		// returns true if there is a next node
		// this is always should return true if the list has something in it
		public boolean hasNext() {
			// TODO Auto-generated method stub
			return size != 0;
		}
		
		// advances the iterator to the next item
		// handles wrapping around back to the head automatically for you
		public E next() {
			// TODO Auto-generated method stub
			prev =  nextItem;
			nextItem = nextItem.next;
			index =  (index + 1) % size;
			return prev.getElement();
	
		}
		
		// removed the last node was visted by the .next() call 
		// for example if we had just created a iterator
		// the following calls would remove the item at index 1 (the second person in the ring)
		// next() next() remove()
		public void remove() {
			int target;
			if(nextItem == head) {
				target = size - 1;
			} else{ 
				target = index - 1;
				index--;
			}
			CircularLinkedList.this.remove(target); //calls the above class
		}
		
	}
	
	
	// Solve the problem in the main method
	// The answer of n = 13,  k = 2 is 
	// the 11th person in the ring (index 10)
	public static void main(String[] args){
                int size = 13;
		int numberOfCounts = 2;
                int  survivor = 0;	
                
            
                CircularLinkedList<Integer> l =  new CircularLinkedList<Integer>();
                l.add(1);
                
                for(int i = 1; i <= size; i++){
                    l.add(i);
                    l.getNode(i);
                    System.out.print(i + " ");
                } 
                System.out.println();
              
               
                   
                   
                   int i[] = {1};
                   Iterator<Integer> iter = l.iterator();
                   int pos = 0;
                   int index = 0;
                   while(iter.hasNext()){
                       iter.next();
                       if(pos >= i.length){
                           break;
                       }
                       if(i[pos] == index){
                       iter.remove();
                       pos++;
                   }
                       index++;
                   }
                   //System.out.println(l.toString());
                  
        }
}
        

